{
	"name": "Go",
	"description": "Rich Go language support for Visual Studio Code",
	"main": "./out/src/goMain",
	"scripts": {
		"compile": "tsc -p ./",
		"fix-lint": "node ./node_modules/tslint/bin/tslint --fix --project tsconfig.json",
		"unit-test": "node ./node_modules/mocha/bin/_mocha -u tdd --timeout 5000 --colors ./out/test/unit"
	},
	"contributes": {
		"breakpoints": [
			{
				"language": "go"
			}
		],
		"commands": [
			{
				"command": "go.gopath",
				"description": "See the currently set GOPATH.",
				"title": "Go: Current GOPATH"
			},
			{
				"command": "go.locate.tools",
				"description": "List all the Go tools being used by this extension along with their locations.",
				"title": "Go: Locate Configured Go Tools"
			},
			{
				"command": "go.test.cursor",
				"description": "Runs a unit test at the cursor.",
				"title": "Go: Test Function At Cursor"
			},
			{
				"command": "go.benchmark.cursor",
				"description": "Runs a benchmark at the cursor.",
				"title": "Go: Benchmark Function At Cursor"
			},
			{
				"command": "go.debug.cursor",
				"description": "Debug test at the cursor.",
				"title": "Go: Debug Test At Cursor"
			},
			{
				"command": "go.test.file",
				"description": "Runs all unit tests in the current file.",
				"title": "Go: Test File"
			},
			{
				"command": "go.test.package",
				"description": "Runs all unit tests in the package of the current file.",
				"title": "Go: Test Package"
			},
			{
				"command": "go.benchmark.package",
				"description": "Runs all benchmarks in the package of the current file.",
				"title": "Go: Benchmark Package"
			},
			{
				"command": "go.benchmark.file",
				"description": "Runs all benchmarks in the current file.",
				"title": "Go: Benchmark File"
			},
			{
				"command": "go.test.workspace",
				"description": "Runs all unit tests from all packages in the current workspace.",
				"title": "Go: Test All Packages In Workspace"
			},
			{
				"command": "go.test.previous",
				"description": "Re-runs the last executed test.",
				"title": "Go: Test Previous"
			},
			{
				"command": "go.test.coverage",
				"description": "Displays test coverage in the current package.",
				"title": "Go: Toggle Test Coverage In Current Package"
			},
			{
				"command": "go.test.generate.package",
				"description": "Generates unit tests for the current package",
				"title": "Go: Generate Unit Tests For Package"
			},
			{
				"command": "go.test.generate.file",
				"description": "Generates unit tests for the current file",
				"title": "Go: Generate Unit Tests For File"
			},
			{
				"command": "go.test.generate.function",
				"description": "Generates unit tests for the selected function in the current file",
				"title": "Go: Generate Unit Tests For Function"
			},
			{
				"command": "go.impl.cursor",
				"description": "Generates method stub for implementing the provided interface and inserts at the cursor.",
				"title": "Go: Generate Interface Stubs"
			},
			{
				"command": "go.import.add",
				"description": "Add an import declaration",
				"title": "Go: Add Import"
			},
			{
				"command": "go.add.package.workspace",
				"description": "Add a package from the imports list to the workspace.",
				"title": "Go: Add Package to Workspace"
			},
			{
				"command": "go.tools.install",
				"description": "install/update the required go packages",
				"title": "Go: Install/Update Tools"
			},
			{
				"command": "go.toggle.test.file",
				"description": "Toggles between file in current active editor and the corresponding test file.",
				"title": "Go: Toggle Test File"
			},
			{
				"command": "go.add.tags",
				"description": "Add tags configured in go.addTags setting to selected struct using gomodifytags",
				"title": "Go: Add Tags To Struct Fields"
			},
			{
				"command": "go.remove.tags",
				"description": "Remove tags configured in go.removeTags setting from selected struct using gomodifytags",
				"title": "Go: Remove Tags From Struct Fields"
			},
			{
				"command": "go.fill.struct",
				"description": "Fill a struct literal with default values",
				"title": "Go: Fill struct"
			},
			{
				"command": "go.show.commands",
				"description": "Shows all commands from the Go extension in the quick pick",
				"title": "Go: Show All Commands..."
			},
			{
				"command": "go.browse.packages",
				"description": "Browse packages and Go files inside the packages.",
				"title": "Go: Browse Packages"
			},
			{
				"command": "go.get.package",
				"description": "Run `go get -v` on the package on the current line.",
				"title": "Go: Get Package"
			},
			{
				"command": "go.playground",
				"description": "Upload the current selection or file to the Go Playground",
				"title": "Go: Run on Go Playground"
			},
			{
				"command": "go.lint.package",
				"description": "Run linter in the package of the current file.",
				"title": "Go: Lint Current Package"
			},
			{
				"command": "go.lint.workspace",
				"description": "Run linter in the current workspace.",
				"title": "Go: Lint Workspace"
			},
			{
				"command": "go.vet.package",
				"description": "Run go vet in the package of the current file.",
				"title": "Go: Vet Current Package"
			},
			{
				"command": "go.vet.workspace",
				"description": "Run go vet in the current workspace.",
				"title": "Go: Vet Workspace"
			},
			{
				"command": "go.build.package",
				"description": "Build the package of the current file.",
				"title": "Go: Build Current Package"
			},
			{
				"command": "go.build.workspace",
				"description": "Build the current workspace.",
				"title": "Go: Build Workspace"
			},
			{
				"command": "go.install.package",
				"description": "Install the current package.",
				"title": "Go: Install Current Package"
			},
			{
				"command": "go.test.cancel",
				"description": "Cancels running tests.",
				"title": "Go: Cancel Running Tests"
			},
			{
				"command": "go.apply.coverprofile",
				"description": "Applies existing cover profile.",
				"title": "Go: Apply Cover Profile"
			},
			{
				"command": "go.godoctor.extract",
				"description": "Extract to function using godoctor.",
				"title": "Go: Extract to function"
			},
			{
				"command": "go.godoctor.var",
				"description": "Extract to variable using godoctor.",
				"title": "Go: Extract to variable"
			},
			{
				"command": "go.languageserver.restart",
				"description": "Restart the running instance of the language server",
				"title": "Go: Restart Language Server"
			}
		],
		"configuration": {
			"properties": {
				"go.addTags": {
					"default": {
						"options": "json=omitempty",
						"promptForTags": false,
						"tags": "json",
						"transform": "snakecase"
					},
					"description": "Tags and options configured here will be used by the Add Tags command to add tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, json tags are added.",
					"properties": {
						"options": {
							"default": "json=omitempty",
							"description": "Comma separated tag=options pairs to be used by Go: Add Tags command",
							"type": "string"
						},
						"promptForTags": {
							"default": false,
							"description": "If true, Go: Add Tags command will prompt the user to provide tags and options instead of using the configured values",
							"type": "boolean"
						},
						"tags": {
							"default": "json",
							"description": "Comma separated tags to be used by Go: Add Tags command",
							"type": "string"
						},
						"transform": {
							"default": "snakecase",
							"description": "Transformation rule used by Go: Add Tags command to add tags",
							"enum": [
								"snakecase",
								"camelcase"
							],
							"type": "string"
						}
					},
					"scope": "resource",
					"type": "object"
				},
				"go.alternateTools": {
					"default": {},
					"description": "Alternate tools or alternate paths for the same tools used by the Go extension. Provide either absolute path or the name of the binary in GOPATH/bin, GOROOT/bin or PATH. Useful when you want to use wrapper script for the Go tools or versioned tools from https://gopkg.in.",
					"properties": {
						"go": {
							"default": "go",
							"description": "Alternate tool to use instead of the go binary or alternate path to use for the go binary.",
							"type": "string"
						},
						"go-outline": {
							"default": "go-outline",
							"description": "Alternate tool to use instead of the go-outline binary or alternate path to use for the go-outline binary.",
							"type": "string"
						},
						"gocode": {
							"default": "gocode",
							"description": "Alternate tool to use instead of the gocode binary or alternate path to use for the gocode binary.",
							"type": "string"
						},
						"gopkgs": {
							"default": "gopkgs",
							"description": "Alternate tool to use instead of the gopkgs binary or alternate path to use for the gopkgs binary.",
							"type": "string"
						},
						"gopls": {
							"default": "gopls",
							"description": "Alternate tool to use instead of the gopls binary or alternate path to use for the gopls binary.",
							"type": "string"
						},
						"guru": {
							"default": "guru",
							"description": "Alternate tool to use instead of the guru binary or alternate path to use for the guru binary.",
							"type": "string"
						}
					},
					"scope": "resource",
					"type": "object"
				},
				"go.autocompleteUnimportedPackages": {
					"default": false,
					"description": "Include unimported packages in auto-complete suggestions.",
					"scope": "resource",
					"type": "boolean"
				},
				"go.buildFlags": {
					"default": [],
					"description": "Flags to `go build`/`go test` used during build-on-save or running tests. (e.g. [\"-ldflags='-s'\"])",
					"items": {
						"type": "string"
					},
					"scope": "resource",
					"type": "array"
				},
				"go.buildOnSave": {
					"default": "package",
					"description": "Compiles code on file save using 'go build -i' or 'go test -c -i'. Options are 'workspace', 'package', or 'off'.",
					"enum": [
						"package",
						"workspace",
						"off"
					],
					"scope": "resource",
					"type": "string"
				},
				"go.buildTags": {
					"default": "",
					"description": "The Go build tags to use for all commands, that support a `-tags '...'` argument. When running tests, go.testTags will be used instead if it was set.",
					"scope": "resource",
					"type": "string"
				},
				"go.coverOnSave": {
					"default": false,
					"description": "If true, runs 'go test -coverprofile' on save and shows test coverage.",
					"scope": "resource",
					"type": "boolean"
				},
				"go.coverOnSingleTest": {
					"default": false,
					"description": "If true, shows test coverage when Go: Test Function at cursor command is run.",
					"type": "boolean"
				},
				"go.coverOnSingleTestFile": {
					"default": false,
					"description": "If true, shows test coverage when Go: Test Single File command is run.",
					"type": "boolean"
				},
				"go.coverOnTestPackage": {
					"default": true,
					"description": "If true, shows test coverage when Go: Test Package command is run.",
					"type": "boolean"
				},
				"go.coverageDecorator": {
					"default": {
						"coveredGutterStyle": "blockblue",
						"coveredHighlightColor": "rgba(64,128,128,0.5)",
						"type": "highlight",
						"uncoveredGutterStyle": "slashyellow",
						"uncoveredHighlightColor": "rgba(128,64,64,0.25)"
					},
					"description": "This option lets you choose the way to display code coverage. Choose either to highlight the complete line or to show a decorator in the gutter. You can customize the color for the former and the style for the latter.",
					"properties": {
						"coveredGutterStyle": {
							"default": "blockblue",
							"description": "Gutter style to indicate covered code.",
							"enum": [
								"blockblue",
								"blockred",
								"blockgreen",
								"blockyellow",
								"slashred",
								"slashgreen",
								"slashblue",
								"slashyellow",
								"verticalred",
								"verticalgreen",
								"verticalblue",
								"verticalyellow"
							],
							"type": "string"
						},
						"coveredHighlightColor": {
							"default": "rgba(64,128,128,0.5)",
							"description": "Color in the rgba format to use to highlight covered code.",
							"type": "string"
						},
						"type": {
							"default": "highlight",
							"enum": [
								"highlight",
								"gutter"
							],
							"type": "string"
						},
						"uncoveredGutterStyle": {
							"default": "blockblue",
							"description": "Gutter style to indicate covered code.",
							"enum": [
								"blockblue",
								"blockred",
								"blockgreen",
								"blockyellow",
								"slashred",
								"slashgreen",
								"slashblue",
								"slashyellow",
								"verticalred",
								"verticalgreen",
								"verticalblue",
								"verticalyellow"
							],
							"type": "string"
						},
						"uncoveredHighlightColor": {
							"default": "rgba(128,64,64,0.25)",
							"description": "Color in the rgba format to use to highlight uncovered code.",
							"type": "string"
						}
					},
					"scope": "resource",
					"type": "object"
				},
				"go.coverageOptions": {
					"default": "showBothCoveredAndUncoveredCode",
					"description": "Use these options to control whether only covered or only uncovered code or both should be highlighted after running test coverage",
					"enum": [
						"showCoveredCodeOnly",
						"showUncoveredCodeOnly",
						"showBothCoveredAndUncoveredCode"
					],
					"scope": "resource",
					"type": "string"
				},
				"go.delveConfig": {
					"default": {
						"apiVersion": 2,
						"dlvLoadConfig": {
							"followPointers": true,
							"maxArrayValues": 64,
							"maxStringLen": 64,
							"maxStructFields": -1,
							"maxVariableRecurse": 1
						},
						"showGlobalVariables": true
					},
					"description": "Delve settings that applies to all debugging sessions. Debug configuration in the launch.json file will override these values.",
					"properties": {
						"apiVersion": {
							"default": 2,
							"description": "Delve Api Version to use. Default value is 2.",
							"enum": [
								1,
								2
							],
							"type": "number"
						},
						"dlvLoadConfig": {
							"default": {
								"followPointers": true,
								"maxArrayValues": 64,
								"maxStringLen": 64,
								"maxStructFields": -1,
								"maxVariableRecurse": 1
							},
							"description": "LoadConfig describes to delve, how to load values from target's memory",
							"properties": {
								"followPointers": {
									"default": true,
									"description": "FollowPointers requests pointers to be automatically dereferenced",
									"type": "boolean"
								},
								"maxArrayValues": {
									"default": 64,
									"description": "MaxArrayValues is the maximum number of elements read from an array, a slice or a map",
									"type": "number"
								},
								"maxStringLen": {
									"default": 64,
									"description": "MaxStringLen is the maximum number of bytes read from a string",
									"type": "number"
								},
								"maxStructFields": {
									"default": -1,
									"description": "MaxStructFields is the maximum number of fields read from a struct, -1 will read all fields",
									"type": "number"
								},
								"maxVariableRecurse": {
									"default": 1,
									"description": "MaxVariableRecurse is how far to recurse when evaluating nested types",
									"type": "number"
								}
							},
							"type": "object"
						},
						"showGlobalVariables": {
							"default": true,
							"description": "Boolean value to indicate whether global package variables should be shown in the variables pane or not.",
							"type": "boolean"
						}
					},
					"scope": "resource",
					"type": "object"
				},
				"go.docsTool": {
					"default": "godoc",
					"description": "Pick 'godoc' or 'gogetdoc' to get documentation. Not applicable when using the language server.",
					"enum": [
						"godoc",
						"gogetdoc",
						"guru"
					],
					"scope": "resource",
					"type": "string"
				},
				"go.editorContextMenuCommands": {
					"default": {
						"addImport": true,
						"addTags": true,
						"debugTestAtCursor": true,
						"generateTestForFile": false,
						"generateTestForFunction": true,
						"generateTestForPackage": false,
						"playground": true,
						"removeTags": false,
						"testAtCursor": true,
						"testCoverage": true,
						"testFile": false,
						"testPackage": false,
						"toggleTestFile": true
					},
					"description": "Experimental Feature: Enable/Disable entries from the context menu in the editor.",
					"properties": {
						"addImport": {
							"default": true,
							"description": "If true, adds command to import a package to the editor context menu",
							"type": "boolean"
						},
						"addTags": {
							"default": true,
							"description": "If true, adds command to add configured tags from struct fields to the editor context menu",
							"type": "boolean"
						},
						"debugTestAtCursor": {
							"default": true,
							"description": "If true, adds command to debug the test under the cursor to the editor context menu",
							"type": "boolean"
						},
						"fillStruct": {
							"default": true,
							"description": "If true, adds command to fill struct literal with default values to the editor context menu",
							"type": "boolean"
						},
						"generateTestForFile": {
							"default": true,
							"description": "If true, adds command to generate unit tests for current file to the editor context menu",
							"type": "boolean"
						},
						"generateTestForFunction": {
							"default": true,
							"description": "If true, adds command to generate unit tests for function under the cursor to the editor context menu",
							"type": "boolean"
						},
						"generateTestForPackage": {
							"default": true,
							"description": "If true, adds command to generate unit tests for currnt package to the editor context menu",
							"type": "boolean"
						},
						"playground": {
							"default": true,
							"description": "If true, adds command to upload the current file or selection to the Go Playground",
							"type": "boolean"
						},
						"removeTags": {
							"default": true,
							"description": "If true, adds command to remove configured tags from struct fields to the editor context menu",
							"type": "boolean"
						},
						"testAtCursor": {
							"default": true,
							"description": "If true, adds command to run the test under the cursor to the editor context menu",
							"type": "boolean"
						},
						"testCoverage": {
							"default": true,
							"description": "If true, adds command to run test coverage to the editor context menu",
							"type": "boolean"
						},
						"testFile": {
							"default": true,
							"description": "If true, adds command to run all tests in the current file to the editor context menu",
							"type": "boolean"
						},
						"testPackage": {
							"default": true,
							"description": "If true, adds command to run all tests in the current package to the editor context menu",
							"type": "boolean"
						},
						"toggleTestFile": {
							"default": true,
							"description": "If true, adds command to toggle between a Go file and its test file to the editor context menu",
							"type": "boolean"
						}
					},
					"scope": "resource",
					"type": "object"
				},
				"go.enableCodeLens": {
					"default": {
						"references": false,
						"runtest": true
					},
					"description": "Feature level setting to enable/disable code lens for references and run/debug tests",
					"properties": {
						"references": {
							"default": false,
							"description": "If true, enables the references code lens. Uses guru. Recalculates when there is change to the document followed by scrolling.",
							"type": "boolean"
						},
						"runtest": {
							"default": true,
							"description": "If true, enables code lens for running and debugging tests",
							"type": "boolean"
						}
					},
					"scope": "resource",
					"type": "object"
				},
				"go.formatFlags": {
					"default": [],
					"description": "Flags to pass to format tool (e.g. [\"-s\"])",
					"items": {
						"type": "string"
					},
					"scope": "resource",
					"type": "array"
				},
				"go.formatTool": {
					"default": "goreturns",
					"description": "Pick 'gofmt', 'goimports', 'goreturns' or 'goformat' to run on format. Not applicable when using the language server. Choosing 'goimports' or 'goreturns' will add missing imports and remove unused imports.",
					"enum": [
						"gofmt",
						"goimports",
						"goreturns",
						"goformat"
					],
					"scope": "resource",
					"type": "string"
				},
				"go.generateTestsFlags": {
					"default": [],
					"description": "Additional command line flags to pass to `gotests` for generating tests.",
					"items": {
						"type": "string"
					},
					"scope": "resource",
					"type": "array"
				},
				"go.gocodeAutoBuild": {
					"default": false,
					"description": "Enable gocode's autobuild feature. Not applicable when using the language server.",
					"scope": "resource",
					"type": "boolean"
				},
				"go.gocodeFlags": {
					"default": [
						"-builtin",
						"-ignore-case",
						"-unimported-packages"
					],
					"description": "Additional flags to pass to gocode. Not applicable when using the language server.",
					"items": {
						"type": "string"
					},
					"scope": "resource",
					"type": "array"
				},
				"go.gocodePackageLookupMode": {
					"default": "go",
					"description": "Used to determine the Go package lookup rules for completions by gocode. Only applies when using nsf/gocode. Latest versions of the Go extension uses mdempsky/gocode by default. Not applicable when using the language server.",
					"enum": [
						"go",
						"gb",
						"bzl"
					],
					"scope": "resource",
					"type": "string"
				},
				"go.gopath": {
					"default": null,
					"description": "Specify GOPATH here to override the one that is set as environment variable. The inferred GOPATH from workspace root overrides this, if go.inferGopath is set to true.",
					"scope": "resource",
					"type": [
						"string",
						"null"
					]
				},
				"go.goroot": {
					"default": null,
					"description": "Specifies the GOROOT to use when no environment variable is set.",
					"scope": "resource",
					"type": [
						"string",
						"null"
					]
				},
				"go.gotoSymbol.ignoreFolders": {
					"default": [],
					"description": "Folder names (not paths) to ignore while using Go to Symbol in Workspace feature",
					"items": {
						"type": "string"
					},
					"scope": "resource",
					"type": "array"
				},
				"go.gotoSymbol.includeGoroot": {
					"default": false,
					"description": "If false, the standard library located at $GOROOT will be excluded while using the Go to Symbol in File feature",
					"scope": "resource",
					"type": "boolean"
				},
				"go.gotoSymbol.includeImports": {
					"default": false,
					"description": "If false, the import statements will be excluded while using the Go to Symbol in File feature",
					"scope": "resource",
					"type": "boolean"
				},
				"go.inferGopath": {
					"default": false,
					"description": "Infer GOPATH from the workspace root.",
					"scope": "resource",
					"type": "boolean"
				},
				"go.installDependenciesWhenBuilding": {
					"default": true,
					"description": "If true, then `-i` flag will be passed to `go build` everytime the code is compiled.",
					"scope": "resource",
					"type": "boolean"
				},
				"go.languageServerExperimentalFeatures": {
					"default": {
						"diagnostics": true,
						"documentLink": true
					},
					"description": "Use this setting to enable/disable experimental features from the language server.",
					"properties": {
						"diagnostics": {
							"default": true,
							"description": "If true, the language server will provide build, vet errors and the extension will ignore the `buildOnSave`, `vetOnSave` settings.",
							"type": "boolean"
						},
						"documentLink": {
							"default": true,
							"description": "If true, the language server will provide clickable Godoc links for import statements.",
							"type": "boolean"
						}
					},
					"type": "object"
				},
				"go.languageServerFlags": {
					"default": [],
					"description": "Flags like -rpc.trace and -logfile to be used while running the language server.",
					"type": "array"
				},
				"go.lintFlags": {
					"default": [],
					"description": "Flags to pass to Lint tool (e.g. [\"-min_confidence=.8\"])",
					"items": {
						"type": "string"
					},
					"scope": "resource",
					"type": "array"
				},
				"go.lintOnSave": {
					"default": "package",
					"description": "Lints code on file save using the configured Lint tool. Options are 'file', 'package', 'workspace' or 'off'.",
					"enum": [
						"file",
						"package",
						"workspace",
						"off"
					],
					"scope": "resource",
					"type": "string"
				},
				"go.lintTool": {
					"default": "golint",
					"description": "Specifies Lint tool name.",
					"enum": [
						"golint",
						"golangci-lint",
						"revive",
						"staticcheck"
					],
					"scope": "resource",
					"type": "string"
				},
				"go.liveErrors": {
					"default": {
						"delay": 500,
						"enabled": false
					},
					"description": "Use gotype on the file currently being edited and report any semantic or syntactic errors found after configured delay.",
					"properties": {
						"delay": {
							"default": 500,
							"description": "The number of milliseconds to delay before execution. Resets with each keystroke.",
							"type": "number"
						},
						"enabled": {
							"default": false,
							"description": "If true, runs gotype on the file currently being edited and reports any semantic or syntactic errors found.",
							"type": "boolean"
						}
					},
					"scope": "resource",
					"type": "object"
				},
				"go.playground": {
					"default": {
						"openbrowser": true,
						"run": true,
						"share": true
					},
					"properties": {
						"description": "The flags configured here will be passed through to command `goplay`",
						"openbrowser": {
							"default": true,
							"description": "Whether to open the created Go Playground in the default browser",
							"type": "boolean"
						},
						"run": {
							"default": true,
							"description": "Whether to run the created Go Playground after creation",
							"type": "boolean"
						},
						"share": {
							"default": true,
							"description": "Whether to make the created Go Playground shareable",
							"type": "boolean"
						}
					},
					"type": "object"
				},
				"go.removeTags": {
					"default": {
						"options": "",
						"promptForTags": false,
						"tags": ""
					},
					"description": "Tags and options configured here will be used by the Remove Tags command to remove tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, all tags and options will be removed.",
					"properties": {
						"options": {
							"default": "json=omitempty",
							"description": "Comma separated tag=options pairs to be used by Go: Remove Tags command",
							"type": "string"
						},
						"promptForTags": {
							"default": false,
							"description": "If true, Go: Remove Tags command will prompt the user to provide tags and options instead of using the configured values",
							"type": "boolean"
						},
						"tags": {
							"default": "json",
							"description": "Comma separated tags to be used by Go: Remove Tags command",
							"type": "string"
						}
					},
					"scope": "resource",
					"type": "object"
				},
				"go.testEnvFile": {
					"default": null,
					"description": "Absolute path to a file containing environment variables definitions. File contents should be of the form key=value.",
					"scope": "resource",
					"type": "string"
				},
				"go.testEnvVars": {
					"default": {},
					"description": "Environment variables that will passed to the process that runs the Go tests",
					"scope": "resource",
					"type": "object"
				},
				"go.testFlags": {
					"default": null,
					"description": "Flags to pass to `go test`. If null, then buildFlags will be used.",
					"items": {
						"type": "string"
					},
					"scope": "resource",
					"type": [
						"array",
						"null"
					]
				},
				"go.testOnSave": {
					"default": false,
					"description": "Run 'go test' on save for current package. It is not advised to set this to `true` when you have Auto Save enabled.",
					"scope": "resource",
					"type": "boolean"
				},
				"go.testTags": {
					"default": null,
					"description": "The Go build tags to use for when running tests. If null, then buildTags will be used.",
					"scope": "resource",
					"type": [
						"string",
						"null"
					]
				},
				"go.testTimeout": {
					"default": "30s",
					"description": "Specifies the timeout for go test in ParseDuration format.",
					"scope": "resource",
					"type": "string"
				},
				"go.toolsEnvVars": {
					"default": {},
					"description": "Environment variables that will passed to the processes that run the Go tools (e.g. CGO_CFLAGS)",
					"scope": "resource",
					"type": "object"
				},
				"go.toolsGopath": {
					"default": "",
					"description": "Location to install the Go tools that the extension depends on if you don't want them in your GOPATH.",
					"scope": "resource",
					"type": "string"
				},
				"go.useCodeSnippetsOnFunctionSuggest": {
					"default": false,
					"description": "Complete functions with their parameter signature, including the variable types",
					"scope": "resource",
					"type": "boolean"
				},
				"go.useCodeSnippetsOnFunctionSuggestWithoutType": {
					"default": false,
					"description": "Complete functions with their parameter signature, excluding the variable types",
					"scope": "resource",
					"type": "boolean"
				},
				"go.useGoProxyToCheckForToolUpdates": {
					"default": true,
					"description": "When enabled, the extension automatically checks the Go proxy if there are updates available for the Go tools (at present, only gopls) it depends on and prompts the user accordingly",
					"type": "boolean"
				},
				"go.useLanguageServer": {
					"default": false,
					"description": "Use the Go language server \"gopls\" from Google for powering language features like code navigation, completion, formatting & diagnostics.",
					"type": "boolean"
				},
				"go.vetFlags": {
					"default": [],
					"description": "Flags to pass to `go tool vet` (e.g. [\"-all\", \"-shadow\"])",
					"items": {
						"type": "string"
					},
					"scope": "resource",
					"type": "array"
				},
				"go.vetOnSave": {
					"default": "package",
					"description": "Vets code on file save using 'go tool vet'. Options are 'workspace', 'package or 'off'.",
					"enum": [
						"package",
						"workspace",
						"off"
					],
					"scope": "resource",
					"type": "string"
				}
			},
			"title": "Go",
			"type": "object"
		},
		"configurationDefaults": {
			"[go]": {
				"editor.codeActionsOnSave": {
					"source.organizeImports": true
				},
				"editor.formatOnSave": true,
				"editor.insertSpaces": false
			}
		},
		"debuggers": [
			{
				"configurationAttributes": {
					"attach": {
						"properties": {
							"apiVersion": {
								"default": 2,
								"description": "Delve Api Version to use. Default value is 2.",
								"enum": [
									1,
									2
								],
								"type": "number"
							},
							"backend": {
								"description": "Backend used by delve. Only available in delve version 0.12.2 and above.",
								"enum": [
									"default",
									"native",
									"lldb"
								],
								"type": "string"
							},
							"cwd": {
								"default": "${workspaceFolder}",
								"description": "Workspace relative or absolute path to the working directory of the program being debugged. Default is the current workspace.",
								"type": "string"
							},
							"dlvLoadConfig": {
								"default": {
									"followPointers": true,
									"maxArrayValues": 64,
									"maxStringLen": 64,
									"maxStructFields": -1,
									"maxVariableRecurse": 1
								},
								"description": "LoadConfig describes to delve, how to load values from target's memory",
								"properties": {
									"followPointers": {
										"default": true,
										"description": "FollowPointers requests pointers to be automatically dereferenced",
										"type": "boolean"
									},
									"maxArrayValues": {
										"default": 64,
										"description": "MaxArrayValues is the maximum number of elements read from an array, a slice or a map",
										"type": "number"
									},
									"maxStringLen": {
										"default": 64,
										"description": "MaxStringLen is the maximum number of bytes read from a string",
										"type": "number"
									},
									"maxStructFields": {
										"default": -1,
										"description": "MaxStructFields is the maximum number of fields read from a struct, -1 will read all fields",
										"type": "number"
									},
									"maxVariableRecurse": {
										"default": 1,
										"description": "MaxVariableRecurse is how far to recurse when evaluating nested types",
										"type": "number"
									}
								},
								"type": "object"
							},
							"host": {
								"default": "127.0.0.1",
								"description": "The host name of the machine the delve debugger will be listening on.",
								"type": "string"
							},
							"logOutput": {
								"default": "debugger",
								"description": "Comma separated list of components that should produce debug output.",
								"enum": [
									"debugger",
									"gdbwire",
									"lldbout",
									"debuglineerr",
									"rpc"
								],
								"type": "string"
							},
							"mode": {
								"default": "local",
								"description": "Indicates local or remote debugging.  Local maps to the dlv 'attach' command, remote maps to 'connect'.",
								"enum": [
									"local",
									"remote"
								]
							},
							"port": {
								"default": 2345,
								"description": "The port that the delve debugger will be listening on.",
								"type": "number"
							},
							"processId": {
								"description": "The ID of the process to be debugged.",
								"type": "number"
							},
							"remotePath": {
								"default": "",
								"description": "If remote debugging, the path to the source code on the remote machine, if different from the local machine.",
								"type": "string"
							},
							"showGlobalVariables": {
								"default": true,
								"description": "Boolean value to indicate whether global package variables should be shown in the variables pane or not.",
								"type": "boolean"
							},
							"showLog": {
								"default": false,
								"description": "Show log output from the delve debugger.",
								"type": "boolean"
							},
							"stackTraceDepth": {
								"default": 50,
								"description": "Maximum depth of stack trace collected from Delve",
								"type": "number"
							},
							"trace": {
								"default": "error",
								"description": "Various levels of logging shown in the debug console. When set to 'log' or 'verbose', the logs will also be written to a file.",
								"enum": [
									"log",
									"verbose",
									"error"
								],
								"type": "string"
							}
						},
						"required": []
					},
					"launch": {
						"properties": {
							"apiVersion": {
								"default": 2,
								"description": "Delve Api Version to use. Default value is 2.",
								"enum": [
									1,
									2
								],
								"type": "number"
							},
							"args": {
								"default": [],
								"description": "Command line arguments passed to the program.",
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"backend": {
								"description": "Backend used by delve. Only available in delve version 0.12.2 and above.",
								"enum": [
									"default",
									"native",
									"lldb"
								],
								"type": "string"
							},
							"buildFlags": {
								"default": "",
								"description": "Build flags, to be passed to the Go compiler.",
								"type": "string"
							},
							"cwd": {
								"default": ".",
								"description": "Workspace relative or absolute path to the working directory of the program being debugged. Default is the current workspace.",
								"type": "string"
							},
							"dlvLoadConfig": {
								"default": {
									"followPointers": true,
									"maxArrayValues": 64,
									"maxStringLen": 64,
									"maxStructFields": -1,
									"maxVariableRecurse": 1
								},
								"description": "LoadConfig describes to delve, how to load values from target's memory",
								"properties": {
									"followPointers": {
										"default": true,
										"description": "FollowPointers requests pointers to be automatically dereferenced",
										"type": "boolean"
									},
									"maxArrayValues": {
										"default": 64,
										"description": "MaxArrayValues is the maximum number of elements read from an array, a slice or a map",
										"type": "number"
									},
									"maxStringLen": {
										"default": 64,
										"description": "MaxStringLen is the maximum number of bytes read from a string",
										"type": "number"
									},
									"maxStructFields": {
										"default": -1,
										"description": "MaxStructFields is the maximum number of fields read from a struct, -1 will read all fields",
										"type": "number"
									},
									"maxVariableRecurse": {
										"default": 1,
										"description": "MaxVariableRecurse is how far to recurse when evaluating nested types",
										"type": "number"
									}
								},
								"type": "object"
							},
							"env": {
								"default": {},
								"description": "Environment variables passed to the program.",
								"type": "object"
							},
							"envFile": {
								"default": "${workspaceFolder}/.env",
								"description": "Absolute path to a file containing environment variable definitions. Multiple files can be specified by provided an array of absolute paths",
								"items": {
									"type": "string"
								},
								"type": [
									"string",
									"array"
								]
							},
							"host": {
								"default": "127.0.0.1",
								"description": "The host name of the machine the delve debugger will be listening on.",
								"type": "string"
							},
							"init": {
								"default": "",
								"description": "Init file, executed by the terminal client.",
								"type": "string"
							},
							"logOutput": {
								"default": "debugger",
								"description": "Comma separated list of components that should produce debug output.",
								"enum": [
									"debugger",
									"gdbwire",
									"lldbout",
									"debuglineerr",
									"rpc"
								],
								"type": "string"
							},
							"mode": {
								"default": "auto",
								"description": "One of 'auto', 'debug', 'remote', 'test', 'exec'.",
								"enum": [
									"auto",
									"debug",
									"remote",
									"test",
									"exec"
								]
							},
							"output": {
								"default": "debug",
								"description": "Output path for the binary of delve",
								"type": "string"
							},
							"port": {
								"default": 2345,
								"description": "The port that the delve debugger will be listening on.",
								"type": "number"
							},
							"program": {
								"default": "${workspaceFolder}",
								"description": "Path to the program folder (or any file within that folder) when in 'debug' or 'test' mode, and to the pre-built binary file to debug in 'exec' mode.",
								"type": "string"
							},
							"remotePath": {
								"default": "",
								"description": "Absolute path to the file being debugged on the remote machine in case of remote debugging.",
								"type": "string"
							},
							"showGlobalVariables": {
								"default": true,
								"description": "Boolean value to indicate whether global package variables should be shown in the variables pane or not.",
								"type": "boolean"
							},
							"showLog": {
								"default": false,
								"description": "Show log output from the delve debugger.",
								"type": "boolean"
							},
							"stackTraceDepth": {
								"default": 50,
								"description": "Maximum depth of stack trace collected from Delve",
								"type": "number"
							},
							"stopOnEntry": {
								"default": false,
								"description": "Automatically stop program after launch.",
								"type": "boolean"
							},
							"trace": {
								"default": "error",
								"description": "Various levels of logging shown in the debug console. When set to 'log' or 'verbose', the logs will also be written to a file.",
								"enum": [
									"log",
									"verbose",
									"error"
								],
								"type": "string"
							}
						},
						"required": []
					}
				},
				"configurationSnippets": [
					{
						"body": {
							"mode": "debug",
							"name": "${2:Launch Package}",
							"program": "^\"\\${workspaceFolder}${1:}\"",
							"request": "launch",
							"type": "go"
						},
						"description": "Debug the package in the program attribute",
						"label": "Go: Launch package"
					},
					{
						"body": {
							"mode": "debug",
							"name": "${2:Launch file}",
							"program": "^\"${1:\\${file\\}}\"",
							"request": "launch",
							"type": "go"
						},
						"description": "Debug the file in the program attribute",
						"label": "Go: Launch file"
					},
					{
						"body": {
							"mode": "test",
							"name": "${2:Launch test package}",
							"program": "^\"\\${workspaceFolder}${1:}\"",
							"request": "launch",
							"type": "go"
						},
						"description": "Debug the test package in the program attribute",
						"label": "Go: Launch test package"
					},
					{
						"body": {
							"args": [
								"-test.run",
								"${2:MyTestFunction}"
							],
							"mode": "test",
							"name": "${3:Launch test function}",
							"program": "^\"\\${workspaceFolder}${1:}\"",
							"request": "launch",
							"type": "go"
						},
						"description": "Debug the test function in the args, ensure program attributes points to right package",
						"label": "Go: Launch test function"
					},
					{
						"body": {
							"mode": "local",
							"name": "${1:Attach to Process}",
							"processId": 0,
							"request": "attach",
							"type": "go"
						},
						"description": "Attach to an existing process by process ID",
						"label": "Go: Attach to local process"
					},
					{
						"body": {
							"host": "127.0.0.1",
							"mode": "remote",
							"name": "${1:Connect to server}",
							"port": 2345,
							"remotePath": "^\"\\${workspaceFolder}\"",
							"request": "attach",
							"type": "go"
						},
						"description": "Connect to a remote headless debug server",
						"label": "Go: Connect to server"
					}
				],
				"label": "Go",
				"languages": [
					"go"
				],
				"program": "./out/src/debugAdapter/goDebug.js",
				"runtime": "node",
				"type": "go"
			}
		],
		"grammars": [
			{
				"language": "go.mod",
				"path": "./syntaxes/go.mod.tmGrammar.json",
				"scopeName": "go.mod"
			},
			{
				"language": "go.sum",
				"path": "./syntaxes/go.sum.tmGrammar.json",
				"scopeName": "go.sum"
			}
		],
		"languages": [
			{
				"aliases": [
					"Go"
				],
				"extensions": [
					".go"
				],
				"id": "go"
			},
			{
				"aliases": [
					"Go Module File"
				],
				"configuration": "./languages/go.mod.language-configuration.json",
				"extensions": [
					"go.mod"
				],
				"id": "go.mod"
			},
			{
				"aliases": [
					"Go Checksum File"
				],
				"extensions": [
					"go.sum"
				],
				"id": "go.sum"
			}
		],
		"menus": {
			"editor/context": [
				{
					"command": "go.toggle.test.file",
					"group": "Go group 1",
					"when": "editorTextFocus && config.go.editorContextMenuCommands.toggleTestFile && resourceLangId == go"
				},
				{
					"command": "go.add.tags",
					"group": "Go group 1",
					"when": "editorTextFocus && config.go.editorContextMenuCommands.addTags && resourceLangId == go"
				},
				{
					"command": "go.remove.tags",
					"group": "Go group 1",
					"when": "editorTextFocus && config.go.editorContextMenuCommands.removeTags && resourceLangId == go"
				},
				{
					"command": "go.fill.struct",
					"group": "Go group 1",
					"when": "editorTextFocus && config.go.editorContextMenuCommands.fillStruct && resourceLangId == go"
				},
				{
					"command": "go.test.cursor",
					"group": "Go group 1",
					"when": "editorTextFocus && config.go.editorContextMenuCommands.testAtCursor && resourceLangId == go && !config.editor.codeLens"
				},
				{
					"command": "go.benchmark.cursor",
					"group": "Go group 1",
					"when": "editorTextFocus && config.go.editorContextMenuCommands.benchmarkAtCursor && resourceLangId == go && !config.editor.codeLens"
				},
				{
					"command": "go.debug.cursor",
					"group": "Go group 1",
					"when": "editorTextFocus && config.go.editorContextMenuCommands.debugTestAtCursor && resourceLangId == go && !config.editor.codeLens"
				},
				{
					"command": "go.test.file",
					"group": "Go group 1",
					"when": "editorTextFocus && config.go.editorContextMenuCommands.testFile && resourceLangId == go"
				},
				{
					"command": "go.test.package",
					"group": "Go group 1",
					"when": "editorTextFocus && config.go.editorContextMenuCommands.testPackage && resourceLangId == go"
				},
				{
					"command": "go.test.generate.function",
					"group": "Go group 1",
					"when": "editorTextFocus && config.go.editorContextMenuCommands.generateTestForFunction && resourceLangId == go"
				},
				{
					"command": "go.test.generate.file",
					"group": "Go group 1",
					"when": "editorTextFocus && config.go.editorContextMenuCommands.generateTestForFile && resourceLangId == go"
				},
				{
					"command": "go.test.generate.package",
					"group": "Go group 1",
					"when": "editorTextFocus && config.go.editorContextMenuCommands.generateTestForPackage && resourceLangId == go"
				},
				{
					"command": "go.import.add",
					"group": "Go group 1",
					"when": "editorTextFocus && config.go.editorContextMenuCommands.addImport && resourceLangId == go"
				},
				{
					"command": "go.test.coverage",
					"group": "Go group 1",
					"when": "editorTextFocus && config.go.editorContextMenuCommands.testCoverage && resourceLangId == go"
				},
				{
					"command": "go.show.commands",
					"group": "Go group 2",
					"when": "editorTextFocus && resourceLangId == go"
				}
			]
		},
		"snippets": [
			{
				"language": "go",
				"path": "./snippets/go.json"
			}
		]
	},
	"activationEvents": [
		"workspaceContains:**/*.go",
		"onLanguage:go",
		"onCommand:go.gopath",
		"onCommand:go.tools.install",
		"onDebugResolve:go"
	],
	"dependencies": {
		"deep-equal": "2.2.3",
		"diff": "7.0.0",
		"json-rpc2": "2.0.0",
		"moment": "2.30.1",
		"semver": "7.6.3",
		"tree-kill": "1.2.2",
		"web-request": "1.0.7"
	},
	"devDependencies": {
		"@types/deep-equal": "1.0.4",
		"@types/fs-extra": "11.0.4",
		"@types/glob": "8.1.0",
		"@types/node": "22.10.1",
		"@types/semver": "7.5.8",
		"@types/sinon": "17.0.3",
		"fs-extra": "11.2.0",
		"glob": "11.0.0",
		"sinon": "19.0.2"
	},
	"extensionDependencies": [],
	"icon": "images/go-logo-blue.png",
	"galleryBanner": {
		"color": "#F2F2F2",
		"theme": "light"
	}
}
